//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Lixir.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
[System.CLSCompliant(false)]
public partial class LixirParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		PRINT=1, METHOD=2, IS=3, ADD=4, OF=5, REMOVE=6, NAME_PROP=7, VALUE_PROP=8, 
		HAS=9, OPEN_METH=10, SAVE_METH=11, IF=12, ELSE=13, FOR=14, IN=15, RETURN=16, 
		DOCUMENT=17, NODE=18, ATTRIBUTE=19, STRING=20, INT=21, SEMICOLON=22, OPEN_BRACKET=23, 
		CLOSE_BRACKET=24, QUOTE=25, EQUALS=26, GT=27, LT=28, COMMA=29, DOUBLE_DOT=30, 
		PLUS=31, MINUS=32, MULTIPLY=33, DIVISION=34, VALID_NAME=35, VALID_INTEGER=36, 
		STRING_LINE=37, WS=38;
	public const int
		RULE_lixir_parser = 0, RULE_code = 1, RULE_type = 2, RULE_type_literal = 3, 
		RULE_instruction = 4, RULE_variable_declaration = 5, RULE_variable_manipulation = 6, 
		RULE_method_call = 7, RULE_mathematics = 8, RULE_conditional_instruction = 9, 
		RULE_boolean_instruction = 10, RULE_boolean_operator = 11, RULE_loop_instruction = 12, 
		RULE_range_operator = 13, RULE_return_instruction = 14, RULE_method = 15, 
		RULE_method_variable = 16, RULE_code_block = 17, RULE_node_literal = 18, 
		RULE_attribute_literal = 19;
	public static readonly string[] ruleNames = {
		"lixir_parser", "code", "type", "type_literal", "instruction", "variable_declaration", 
		"variable_manipulation", "method_call", "mathematics", "conditional_instruction", 
		"boolean_instruction", "boolean_operator", "loop_instruction", "range_operator", 
		"return_instruction", "method", "method_variable", "code_block", "node_literal", 
		"attribute_literal"
	};

	private static readonly string[] _LiteralNames = {
		null, "'print'", "'meth'", "'.is'", "'.add'", "'of'", "'.remove'", "'.name'", 
		"'.value'", "'.has'", "'.Open'", "'.Save'", "'if'", "'else'", "'for'", 
		"'in'", "'return'", "'Document'", "'Node'", "'Attribute'", "'String'", 
		"'Int'", "':'", "'('", "')'", "'\"'", "'='", "'>'", "'<'", "','", "'..'", 
		"'+'", "'-'", "'*'", "'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "PRINT", "METHOD", "IS", "ADD", "OF", "REMOVE", "NAME_PROP", "VALUE_PROP", 
		"HAS", "OPEN_METH", "SAVE_METH", "IF", "ELSE", "FOR", "IN", "RETURN", 
		"DOCUMENT", "NODE", "ATTRIBUTE", "STRING", "INT", "SEMICOLON", "OPEN_BRACKET", 
		"CLOSE_BRACKET", "QUOTE", "EQUALS", "GT", "LT", "COMMA", "DOUBLE_DOT", 
		"PLUS", "MINUS", "MULTIPLY", "DIVISION", "VALID_NAME", "VALID_INTEGER", 
		"STRING_LINE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Lixir.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static LixirParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LixirParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LixirParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Lixir_parserContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(LixirParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CodeContext[] code() {
			return GetRuleContexts<CodeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodeContext code(int i) {
			return GetRuleContext<CodeContext>(i);
		}
		public Lixir_parserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lixir_parser; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILixirVisitor<TResult> typedVisitor = visitor as ILixirVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLixir_parser(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lixir_parserContext lixir_parser() {
		Lixir_parserContext _localctx = new Lixir_parserContext(Context, State);
		EnterRule(_localctx, 0, RULE_lixir_parser);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << METHOD) | (1L << IF) | (1L << FOR) | (1L << RETURN) | (1L << VALID_NAME))) != 0)) {
				{
				{
				State = 40;
				code();
				}
				}
				State = 45;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 46;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodContext method() {
			return GetRuleContext<MethodContext>(0);
		}
		public CodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILixirVisitor<TResult> typedVisitor = visitor as ILixirVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeContext code() {
		CodeContext _localctx = new CodeContext(Context, State);
		EnterRule(_localctx, 2, RULE_code);
		try {
			State = 50;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IF:
			case FOR:
			case RETURN:
			case VALID_NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 48;
				instruction();
				}
				break;
			case METHOD:
				EnterOuterAlt(_localctx, 2);
				{
				State = 49;
				method();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOCUMENT() { return GetToken(LixirParser.DOCUMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODE() { return GetToken(LixirParser.NODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTE() { return GetToken(LixirParser.ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(LixirParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(LixirParser.INT, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILixirVisitor<TResult> typedVisitor = visitor as ILixirVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 4, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DOCUMENT) | (1L << NODE) | (1L << ATTRIBUTE) | (1L << STRING) | (1L << INT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Node_literalContext node_literal() {
			return GetRuleContext<Node_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_literalContext attribute_literal() {
			return GetRuleContext<Attribute_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LINE() { return GetToken(LixirParser.STRING_LINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALID_INTEGER() { return GetToken(LixirParser.VALID_INTEGER, 0); }
		public Type_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILixirVisitor<TResult> typedVisitor = visitor as ILixirVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_literalContext type_literal() {
		Type_literalContext _localctx = new Type_literalContext(Context, State);
		EnterRule(_localctx, 6, RULE_type_literal);
		try {
			State = 58;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 54;
				node_literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 55;
				attribute_literal();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 56;
				Match(STRING_LINE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 57;
				Match(VALID_INTEGER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declarationContext variable_declaration() {
			return GetRuleContext<Variable_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_instructionContext conditional_instruction() {
			return GetRuleContext<Conditional_instructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Loop_instructionContext loop_instruction() {
			return GetRuleContext<Loop_instructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_manipulationContext variable_manipulation() {
			return GetRuleContext<Variable_manipulationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Return_instructionContext return_instruction() {
			return GetRuleContext<Return_instructionContext>(0);
		}
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILixirVisitor<TResult> typedVisitor = visitor as ILixirVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		InstructionContext _localctx = new InstructionContext(Context, State);
		EnterRule(_localctx, 8, RULE_instruction);
		try {
			State = 65;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 60;
				variable_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 61;
				conditional_instruction();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 62;
				loop_instruction();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 63;
				variable_manipulation();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 64;
				return_instruction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_declarationContext : ParserRuleContext {
		public IToken var_type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VALID_NAME() { return GetTokens(LixirParser.VALID_NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALID_NAME(int i) {
			return GetToken(LixirParser.VALID_NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(LixirParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LINE() { return GetToken(LixirParser.STRING_LINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALID_INTEGER() { return GetToken(LixirParser.VALID_INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODE() { return GetToken(LixirParser.NODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTE() { return GetToken(LixirParser.ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Node_literalContext node_literal() {
			return GetRuleContext<Node_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_literalContext attribute_literal() {
			return GetRuleContext<Attribute_literalContext>(0);
		}
		public Variable_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILixirVisitor<TResult> typedVisitor = visitor as ILixirVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declarationContext variable_declaration() {
		Variable_declarationContext _localctx = new Variable_declarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_variable_declaration);
		int _la;
		try {
			State = 80;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 67;
				Match(VALID_NAME);
				State = 68;
				Match(IS);
				State = 69;
				_localctx.var_type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==VALID_INTEGER || _la==STRING_LINE) ) {
					_localctx.var_type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 70;
				Match(VALID_NAME);
				State = 71;
				Match(IS);
				State = 72;
				_localctx.var_type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==NODE || _la==ATTRIBUTE) ) {
					_localctx.var_type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 75;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
				case 1:
					{
					State = 73;
					node_literal();
					}
					break;
				case 2:
					{
					State = 74;
					attribute_literal();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 77;
				Match(VALID_NAME);
				State = 78;
				Match(IS);
				State = 79;
				Match(VALID_NAME);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_manipulationContext : ParserRuleContext {
		public Variable_manipulationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_manipulation; } }
	 
		public Variable_manipulationContext() { }
		public virtual void CopyFrom(Variable_manipulationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VARIABLE_INNER_METHODContext : Variable_manipulationContext {
		public IToken inner_method;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALID_NAME() { return GetToken(LixirParser.VALID_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LINE() { return GetToken(LixirParser.STRING_LINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_METH() { return GetToken(LixirParser.OPEN_METH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVE_METH() { return GetToken(LixirParser.SAVE_METH, 0); }
		public VARIABLE_INNER_METHODContext(Variable_manipulationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILixirVisitor<TResult> typedVisitor = visitor as ILixirVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVARIABLE_INNER_METHOD(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VARIABLE_ADD_CHILDContext : Variable_manipulationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VALID_NAME() { return GetTokens(LixirParser.VALID_NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALID_NAME(int i) {
			return GetToken(LixirParser.VALID_NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(LixirParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(LixirParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_literalContext type_literal() {
			return GetRuleContext<Type_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(LixirParser.CLOSE_BRACKET, 0); }
		public VARIABLE_ADD_CHILDContext(Variable_manipulationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILixirVisitor<TResult> typedVisitor = visitor as ILixirVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVARIABLE_ADD_CHILD(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VARIABLE_ASSIGNMENTContext : Variable_manipulationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VALID_NAME() { return GetTokens(LixirParser.VALID_NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALID_NAME(int i) {
			return GetToken(LixirParser.VALID_NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(LixirParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Method_callContext method_call() {
			return GetRuleContext<Method_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MathematicsContext mathematics() {
			return GetRuleContext<MathematicsContext>(0);
		}
		public VARIABLE_ASSIGNMENTContext(Variable_manipulationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILixirVisitor<TResult> typedVisitor = visitor as ILixirVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVARIABLE_ASSIGNMENT(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VARIABLE_NAME_PROPContext : Variable_manipulationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALID_NAME() { return GetToken(LixirParser.VALID_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME_PROP() { return GetToken(LixirParser.NAME_PROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(LixirParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LINE() { return GetToken(LixirParser.STRING_LINE, 0); }
		public VARIABLE_NAME_PROPContext(Variable_manipulationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILixirVisitor<TResult> typedVisitor = visitor as ILixirVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVARIABLE_NAME_PROP(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VARIABLE_REMOVE_CHILDContext : Variable_manipulationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VALID_NAME() { return GetTokens(LixirParser.VALID_NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALID_NAME(int i) {
			return GetToken(LixirParser.VALID_NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOVE() { return GetToken(LixirParser.REMOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LINE() { return GetToken(LixirParser.STRING_LINE, 0); }
		public VARIABLE_REMOVE_CHILDContext(Variable_manipulationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILixirVisitor<TResult> typedVisitor = visitor as ILixirVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVARIABLE_REMOVE_CHILD(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VARIABLE_VALUE_PROPContext : Variable_manipulationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VALID_NAME() { return GetTokens(LixirParser.VALID_NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALID_NAME(int i) {
			return GetToken(LixirParser.VALID_NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_PROP() { return GetToken(LixirParser.VALUE_PROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(LixirParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(LixirParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_literalContext type_literal() {
			return GetRuleContext<Type_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(LixirParser.CLOSE_BRACKET, 0); }
		public VARIABLE_VALUE_PROPContext(Variable_manipulationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILixirVisitor<TResult> typedVisitor = visitor as ILixirVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVARIABLE_VALUE_PROP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_manipulationContext variable_manipulation() {
		Variable_manipulationContext _localctx = new Variable_manipulationContext(Context, State);
		EnterRule(_localctx, 12, RULE_variable_manipulation);
		int _la;
		try {
			State = 118;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				_localctx = new VARIABLE_NAME_PROPContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 82;
				Match(VALID_NAME);
				State = 83;
				Match(NAME_PROP);
				State = 84;
				Match(EQUALS);
				State = 85;
				Match(STRING_LINE);
				}
				break;
			case 2:
				_localctx = new VARIABLE_VALUE_PROPContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 86;
				Match(VALID_NAME);
				State = 87;
				Match(VALUE_PROP);
				State = 88;
				Match(EQUALS);
				State = 94;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case VALID_NAME:
					{
					State = 89;
					Match(VALID_NAME);
					}
					break;
				case OPEN_BRACKET:
					{
					State = 90;
					Match(OPEN_BRACKET);
					State = 91;
					type_literal();
					State = 92;
					Match(CLOSE_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				_localctx = new VARIABLE_ADD_CHILDContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 96;
				Match(VALID_NAME);
				State = 97;
				Match(ADD);
				State = 103;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case VALID_NAME:
					{
					State = 98;
					Match(VALID_NAME);
					}
					break;
				case OPEN_BRACKET:
					{
					State = 99;
					Match(OPEN_BRACKET);
					State = 100;
					type_literal();
					State = 101;
					Match(CLOSE_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				_localctx = new VARIABLE_REMOVE_CHILDContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 105;
				Match(VALID_NAME);
				State = 106;
				Match(REMOVE);
				State = 107;
				_la = TokenStream.LA(1);
				if ( !(_la==VALID_NAME || _la==STRING_LINE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 5:
				_localctx = new VARIABLE_INNER_METHODContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 108;
				Match(VALID_NAME);
				State = 109;
				((VARIABLE_INNER_METHODContext)_localctx).inner_method = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==OPEN_METH || _la==SAVE_METH) ) {
					((VARIABLE_INNER_METHODContext)_localctx).inner_method = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 110;
				Match(STRING_LINE);
				}
				break;
			case 6:
				_localctx = new VARIABLE_ASSIGNMENTContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 111;
				Match(VALID_NAME);
				State = 112;
				Match(EQUALS);
				State = 116;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
				case 1:
					{
					State = 113;
					Match(VALID_NAME);
					}
					break;
				case 2:
					{
					State = 114;
					method_call();
					}
					break;
				case 3:
					{
					State = 115;
					mathematics();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VALID_NAME() { return GetTokens(LixirParser.VALID_NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALID_NAME(int i) {
			return GetToken(LixirParser.VALID_NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(LixirParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(LixirParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_literalContext[] type_literal() {
			return GetRuleContexts<Type_literalContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_literalContext type_literal(int i) {
			return GetRuleContext<Type_literalContext>(i);
		}
		public Method_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILixirVisitor<TResult> typedVisitor = visitor as ILixirVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_callContext method_call() {
		Method_callContext _localctx = new Method_callContext(Context, State);
		EnterRule(_localctx, 14, RULE_method_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			Match(VALID_NAME);
			State = 121;
			Match(OPEN_BRACKET);
			State = 126;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VALID_NAME) | (1L << VALID_INTEGER) | (1L << STRING_LINE))) != 0)) {
				{
				State = 124;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
				case 1:
					{
					State = 122;
					type_literal();
					}
					break;
				case 2:
					{
					State = 123;
					Match(VALID_NAME);
					}
					break;
				}
				}
				State = 128;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 129;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MathematicsContext : ParserRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VALID_INTEGER() { return GetTokens(LixirParser.VALID_INTEGER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALID_INTEGER(int i) {
			return GetToken(LixirParser.VALID_INTEGER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VALID_NAME() { return GetTokens(LixirParser.VALID_NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALID_NAME(int i) {
			return GetToken(LixirParser.VALID_NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(LixirParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(LixirParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY() { return GetToken(LixirParser.MULTIPLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVISION() { return GetToken(LixirParser.DIVISION, 0); }
		public MathematicsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mathematics; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILixirVisitor<TResult> typedVisitor = visitor as ILixirVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMathematics(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MathematicsContext mathematics() {
		MathematicsContext _localctx = new MathematicsContext(Context, State);
		EnterRule(_localctx, 16, RULE_mathematics);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			_la = TokenStream.LA(1);
			if ( !(_la==VALID_NAME || _la==VALID_INTEGER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 132;
			_localctx.op = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << MINUS) | (1L << MULTIPLY) | (1L << DIVISION))) != 0)) ) {
				_localctx.op = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 133;
			_la = TokenStream.LA(1);
			if ( !(_la==VALID_NAME || _la==VALID_INTEGER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_instructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(LixirParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Boolean_instructionContext boolean_instruction() {
			return GetRuleContext<Boolean_instructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(LixirParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Code_blockContext[] code_block() {
			return GetRuleContexts<Code_blockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Code_blockContext code_block(int i) {
			return GetRuleContext<Code_blockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(LixirParser.ELSE, 0); }
		public Conditional_instructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_instruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILixirVisitor<TResult> typedVisitor = visitor as ILixirVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional_instruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_instructionContext conditional_instruction() {
		Conditional_instructionContext _localctx = new Conditional_instructionContext(Context, State);
		EnterRule(_localctx, 18, RULE_conditional_instruction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			Match(IF);
			State = 136;
			boolean_instruction();
			State = 137;
			Match(SEMICOLON);
			State = 138;
			code_block();
			State = 141;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 139;
				Match(ELSE);
				State = 140;
				code_block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boolean_instructionContext : ParserRuleContext {
		public IToken value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VALID_NAME() { return GetTokens(LixirParser.VALID_NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALID_NAME(int i) {
			return GetToken(LixirParser.VALID_NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAS() { return GetToken(LixirParser.HAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LINE() { return GetToken(LixirParser.STRING_LINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME_PROP() { return GetToken(LixirParser.NAME_PROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Boolean_operatorContext boolean_operator() {
			return GetRuleContext<Boolean_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALID_INTEGER() { return GetToken(LixirParser.VALID_INTEGER, 0); }
		public Boolean_instructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_instruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILixirVisitor<TResult> typedVisitor = visitor as ILixirVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean_instruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_instructionContext boolean_instruction() {
		Boolean_instructionContext _localctx = new Boolean_instructionContext(Context, State);
		EnterRule(_localctx, 20, RULE_boolean_instruction);
		int _la;
		try {
			State = 155;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 143;
				Match(VALID_NAME);
				State = 144;
				Match(HAS);
				State = 145;
				Match(STRING_LINE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 146;
				Match(VALID_NAME);
				State = 147;
				Match(NAME_PROP);
				State = 148;
				boolean_operator();
				State = 149;
				_la = TokenStream.LA(1);
				if ( !(_la==VALID_INTEGER || _la==STRING_LINE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 151;
				Match(VALID_NAME);
				State = 152;
				boolean_operator();
				State = 153;
				_localctx.value = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VALID_NAME) | (1L << VALID_INTEGER) | (1L << STRING_LINE))) != 0)) ) {
					_localctx.value = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boolean_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUALS() { return GetTokens(LixirParser.EQUALS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS(int i) {
			return GetToken(LixirParser.EQUALS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(LixirParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(LixirParser.LT, 0); }
		public Boolean_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILixirVisitor<TResult> typedVisitor = visitor as ILixirVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_operatorContext boolean_operator() {
		Boolean_operatorContext _localctx = new Boolean_operatorContext(Context, State);
		EnterRule(_localctx, 22, RULE_boolean_operator);
		try {
			State = 161;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EQUALS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 157;
				Match(EQUALS);
				State = 158;
				Match(EQUALS);
				}
				break;
			case GT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 159;
				Match(GT);
				}
				break;
			case LT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 160;
				Match(LT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Loop_instructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(LixirParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VALID_NAME() { return GetTokens(LixirParser.VALID_NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALID_NAME(int i) {
			return GetToken(LixirParser.VALID_NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(LixirParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Range_operatorContext range_operator() {
			return GetRuleContext<Range_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(LixirParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		public Loop_instructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop_instruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILixirVisitor<TResult> typedVisitor = visitor as ILixirVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoop_instruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Loop_instructionContext loop_instruction() {
		Loop_instructionContext _localctx = new Loop_instructionContext(Context, State);
		EnterRule(_localctx, 24, RULE_loop_instruction);
		try {
			State = 176;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 163;
				Match(FOR);
				State = 164;
				Match(VALID_NAME);
				State = 165;
				Match(IN);
				State = 166;
				range_operator();
				State = 167;
				Match(SEMICOLON);
				State = 168;
				code_block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 170;
				Match(FOR);
				State = 171;
				Match(VALID_NAME);
				State = 172;
				Match(IN);
				State = 173;
				Match(VALID_NAME);
				State = 174;
				Match(SEMICOLON);
				State = 175;
				code_block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Range_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VALID_INTEGER() { return GetTokens(LixirParser.VALID_INTEGER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALID_INTEGER(int i) {
			return GetToken(LixirParser.VALID_INTEGER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_DOT() { return GetToken(LixirParser.DOUBLE_DOT, 0); }
		public Range_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILixirVisitor<TResult> typedVisitor = visitor as ILixirVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Range_operatorContext range_operator() {
		Range_operatorContext _localctx = new Range_operatorContext(Context, State);
		EnterRule(_localctx, 26, RULE_range_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			Match(VALID_INTEGER);
			State = 179;
			Match(DOUBLE_DOT);
			State = 180;
			Match(VALID_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_instructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(LixirParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_literalContext type_literal() {
			return GetRuleContext<Type_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALID_NAME() { return GetToken(LixirParser.VALID_NAME, 0); }
		public Return_instructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_instruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILixirVisitor<TResult> typedVisitor = visitor as ILixirVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_instruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_instructionContext return_instruction() {
		Return_instructionContext _localctx = new Return_instructionContext(Context, State);
		EnterRule(_localctx, 28, RULE_return_instruction);
		try {
			State = 186;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 182;
				Match(RETURN);
				State = 183;
				type_literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 184;
				Match(RETURN);
				State = 185;
				Match(VALID_NAME);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode METHOD() { return GetToken(LixirParser.METHOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALID_NAME() { return GetToken(LixirParser.VALID_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(LixirParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Code_blockContext code_block() {
			return GetRuleContext<Code_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Method_variableContext[] method_variable() {
			return GetRuleContexts<Method_variableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Method_variableContext method_variable(int i) {
			return GetRuleContext<Method_variableContext>(i);
		}
		public MethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILixirVisitor<TResult> typedVisitor = visitor as ILixirVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodContext method() {
		MethodContext _localctx = new MethodContext(Context, State);
		EnterRule(_localctx, 30, RULE_method);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			Match(METHOD);
			State = 189;
			type();
			State = 190;
			Match(VALID_NAME);
			State = 194;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DOCUMENT) | (1L << NODE) | (1L << ATTRIBUTE) | (1L << STRING) | (1L << INT))) != 0)) {
				{
				{
				State = 191;
				method_variable();
				}
				}
				State = 196;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 197;
			Match(SEMICOLON);
			State = 198;
			code_block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_variableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(LixirParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALID_NAME() { return GetToken(LixirParser.VALID_NAME, 0); }
		public Method_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILixirVisitor<TResult> typedVisitor = visitor as ILixirVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_variable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_variableContext method_variable() {
		Method_variableContext _localctx = new Method_variableContext(Context, State);
		EnterRule(_localctx, 32, RULE_method_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200;
			type();
			State = 201;
			Match(SEMICOLON);
			State = 202;
			Match(VALID_NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Code_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(LixirParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(LixirParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		public Code_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILixirVisitor<TResult> typedVisitor = visitor as ILixirVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCode_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Code_blockContext code_block() {
		Code_blockContext _localctx = new Code_blockContext(Context, State);
		EnterRule(_localctx, 34, RULE_code_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			Match(OPEN_BRACKET);
			State = 208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << FOR) | (1L << RETURN) | (1L << VALID_NAME))) != 0)) {
				{
				{
				State = 205;
				instruction();
				}
				}
				State = 210;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 211;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Node_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(LixirParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(LixirParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(LixirParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LINE() { return GetToken(LixirParser.STRING_LINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALID_NAME() { return GetToken(LixirParser.VALID_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_literalContext[] attribute_literal() {
			return GetRuleContexts<Attribute_literalContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_literalContext attribute_literal(int i) {
			return GetRuleContext<Attribute_literalContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Node_literalContext[] node_literal() {
			return GetRuleContexts<Node_literalContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Node_literalContext node_literal(int i) {
			return GetRuleContext<Node_literalContext>(i);
		}
		public Node_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_node_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILixirVisitor<TResult> typedVisitor = visitor as ILixirVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNode_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Node_literalContext node_literal() {
		Node_literalContext _localctx = new Node_literalContext(Context, State);
		EnterRule(_localctx, 36, RULE_node_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			_la = TokenStream.LA(1);
			if ( !(_la==VALID_NAME || _la==STRING_LINE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 214;
			Match(SEMICOLON);
			State = 215;
			Match(OPEN_BRACKET);
			State = 220;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==VALID_NAME || _la==STRING_LINE) {
				{
				State = 218;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
				case 1:
					{
					State = 216;
					attribute_literal();
					}
					break;
				case 2:
					{
					State = 217;
					node_literal();
					}
					break;
				}
				}
				State = 222;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 223;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(LixirParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_LINE() { return GetTokens(LixirParser.STRING_LINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LINE(int i) {
			return GetToken(LixirParser.STRING_LINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VALID_NAME() { return GetTokens(LixirParser.VALID_NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALID_NAME(int i) {
			return GetToken(LixirParser.VALID_NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALID_INTEGER() { return GetToken(LixirParser.VALID_INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(LixirParser.COMMA, 0); }
		public Attribute_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILixirVisitor<TResult> typedVisitor = visitor as ILixirVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_literalContext attribute_literal() {
		Attribute_literalContext _localctx = new Attribute_literalContext(Context, State);
		EnterRule(_localctx, 38, RULE_attribute_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			_la = TokenStream.LA(1);
			if ( !(_la==VALID_NAME || _la==STRING_LINE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 226;
			Match(EQUALS);
			State = 227;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VALID_NAME) | (1L << VALID_INTEGER) | (1L << STRING_LINE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 229;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 228;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '(', '\xEA', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x3', 
		'\x2', '\a', '\x2', ',', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '/', 
		'\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x5', 
		'\x3', '\x35', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '=', '\n', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x5', '\x6', '\x44', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', 
		'\a', 'N', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 
		'S', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x5', '\b', '\x61', '\n', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x5', '\b', 'j', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 'w', '\n', '\b', '\x5', '\b', 
		'y', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', 
		'\t', '\x7F', '\n', '\t', '\f', '\t', '\xE', '\t', '\x82', '\v', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x5', '\v', '\x90', '\n', '\v', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', 
		'\x9E', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x5', '\r', '\xA4', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x5', '\xE', '\xB3', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x5', '\x10', '\xBD', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\a', '\x11', '\xC3', '\n', '\x11', '\f', 
		'\x11', '\xE', '\x11', '\xC6', '\v', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x13', '\x3', '\x13', '\a', '\x13', '\xD1', '\n', '\x13', '\f', 
		'\x13', '\xE', '\x13', '\xD4', '\v', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\a', '\x14', '\xDD', '\n', '\x14', '\f', '\x14', '\xE', '\x14', '\xE0', 
		'\v', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\xE8', '\n', '\x15', '\x3', 
		'\x15', '\x2', '\x2', '\x16', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', 
		'$', '&', '(', '\x2', '\n', '\x3', '\x2', '\x13', '\x17', '\x3', '\x2', 
		'&', '\'', '\x3', '\x2', '\x14', '\x15', '\x4', '\x2', '%', '%', '\'', 
		'\'', '\x3', '\x2', '\f', '\r', '\x3', '\x2', '%', '&', '\x3', '\x2', 
		'!', '$', '\x3', '\x2', '%', '\'', '\x2', '\xF9', '\x2', '-', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\x34', '\x3', '\x2', '\x2', '\x2', '\x6', '\x36', 
		'\x3', '\x2', '\x2', '\x2', '\b', '<', '\x3', '\x2', '\x2', '\x2', '\n', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\f', 'R', '\x3', '\x2', '\x2', '\x2', 
		'\xE', 'x', '\x3', '\x2', '\x2', '\x2', '\x10', 'z', '\x3', '\x2', '\x2', 
		'\x2', '\x12', '\x85', '\x3', '\x2', '\x2', '\x2', '\x14', '\x89', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\xA3', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xB2', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\xB4', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xBC', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\xBE', '\x3', '\x2', '\x2', '\x2', '\"', '\xCA', 
		'\x3', '\x2', '\x2', '\x2', '$', '\xCE', '\x3', '\x2', '\x2', '\x2', '&', 
		'\xD7', '\x3', '\x2', '\x2', '\x2', '(', '\xE3', '\x3', '\x2', '\x2', 
		'\x2', '*', ',', '\x5', '\x4', '\x3', '\x2', '+', '*', '\x3', '\x2', '\x2', 
		'\x2', ',', '/', '\x3', '\x2', '\x2', '\x2', '-', '+', '\x3', '\x2', '\x2', 
		'\x2', '-', '.', '\x3', '\x2', '\x2', '\x2', '.', '\x30', '\x3', '\x2', 
		'\x2', '\x2', '/', '-', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\a', 
		'\x2', '\x2', '\x3', '\x31', '\x3', '\x3', '\x2', '\x2', '\x2', '\x32', 
		'\x35', '\x5', '\n', '\x6', '\x2', '\x33', '\x35', '\x5', ' ', '\x11', 
		'\x2', '\x34', '\x32', '\x3', '\x2', '\x2', '\x2', '\x34', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x35', '\x5', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'\x37', '\t', '\x2', '\x2', '\x2', '\x37', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\x38', '=', '\x5', '&', '\x14', '\x2', '\x39', '=', '\x5', '(', 
		'\x15', '\x2', ':', '=', '\a', '\'', '\x2', '\x2', ';', '=', '\a', '&', 
		'\x2', '\x2', '<', '\x38', '\x3', '\x2', '\x2', '\x2', '<', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '<', ':', '\x3', '\x2', '\x2', '\x2', '<', ';', '\x3', 
		'\x2', '\x2', '\x2', '=', '\t', '\x3', '\x2', '\x2', '\x2', '>', '\x44', 
		'\x5', '\f', '\a', '\x2', '?', '\x44', '\x5', '\x14', '\v', '\x2', '@', 
		'\x44', '\x5', '\x1A', '\xE', '\x2', '\x41', '\x44', '\x5', '\xE', '\b', 
		'\x2', '\x42', '\x44', '\x5', '\x1E', '\x10', '\x2', '\x43', '>', '\x3', 
		'\x2', '\x2', '\x2', '\x43', '?', '\x3', '\x2', '\x2', '\x2', '\x43', 
		'@', '\x3', '\x2', '\x2', '\x2', '\x43', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x43', '\x42', '\x3', '\x2', '\x2', '\x2', '\x44', '\v', '\x3', 
		'\x2', '\x2', '\x2', '\x45', '\x46', '\a', '%', '\x2', '\x2', '\x46', 
		'G', '\a', '\x5', '\x2', '\x2', 'G', 'S', '\t', '\x3', '\x2', '\x2', 'H', 
		'I', '\a', '%', '\x2', '\x2', 'I', 'J', '\a', '\x5', '\x2', '\x2', 'J', 
		'M', '\t', '\x4', '\x2', '\x2', 'K', 'N', '\x5', '&', '\x14', '\x2', 'L', 
		'N', '\x5', '(', '\x15', '\x2', 'M', 'K', '\x3', '\x2', '\x2', '\x2', 
		'M', 'L', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\x3', '\x2', '\x2', '\x2', 
		'N', 'S', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\a', '%', '\x2', '\x2', 
		'P', 'Q', '\a', '\x5', '\x2', '\x2', 'Q', 'S', '\a', '%', '\x2', '\x2', 
		'R', '\x45', '\x3', '\x2', '\x2', '\x2', 'R', 'H', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'O', '\x3', '\x2', '\x2', '\x2', 'S', '\r', '\x3', '\x2', 
		'\x2', '\x2', 'T', 'U', '\a', '%', '\x2', '\x2', 'U', 'V', '\a', '\t', 
		'\x2', '\x2', 'V', 'W', '\a', '\x1C', '\x2', '\x2', 'W', 'y', '\a', '\'', 
		'\x2', '\x2', 'X', 'Y', '\a', '%', '\x2', '\x2', 'Y', 'Z', '\a', '\n', 
		'\x2', '\x2', 'Z', '`', '\a', '\x1C', '\x2', '\x2', '[', '\x61', '\a', 
		'%', '\x2', '\x2', '\\', ']', '\a', '\x19', '\x2', '\x2', ']', '^', '\x5', 
		'\b', '\x5', '\x2', '^', '_', '\a', '\x1A', '\x2', '\x2', '_', '\x61', 
		'\x3', '\x2', '\x2', '\x2', '`', '[', '\x3', '\x2', '\x2', '\x2', '`', 
		'\\', '\x3', '\x2', '\x2', '\x2', '\x61', 'y', '\x3', '\x2', '\x2', '\x2', 
		'\x62', '\x63', '\a', '%', '\x2', '\x2', '\x63', 'i', '\a', '\x6', '\x2', 
		'\x2', '\x64', 'j', '\a', '%', '\x2', '\x2', '\x65', '\x66', '\a', '\x19', 
		'\x2', '\x2', '\x66', 'g', '\x5', '\b', '\x5', '\x2', 'g', 'h', '\a', 
		'\x1A', '\x2', '\x2', 'h', 'j', '\x3', '\x2', '\x2', '\x2', 'i', '\x64', 
		'\x3', '\x2', '\x2', '\x2', 'i', '\x65', '\x3', '\x2', '\x2', '\x2', 'j', 
		'y', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\a', '%', '\x2', '\x2', 'l', 
		'm', '\a', '\b', '\x2', '\x2', 'm', 'y', '\t', '\x5', '\x2', '\x2', 'n', 
		'o', '\a', '%', '\x2', '\x2', 'o', 'p', '\t', '\x6', '\x2', '\x2', 'p', 
		'y', '\a', '\'', '\x2', '\x2', 'q', 'r', '\a', '%', '\x2', '\x2', 'r', 
		'v', '\a', '\x1C', '\x2', '\x2', 's', 'w', '\a', '%', '\x2', '\x2', 't', 
		'w', '\x5', '\x10', '\t', '\x2', 'u', 'w', '\x5', '\x12', '\n', '\x2', 
		'v', 's', '\x3', '\x2', '\x2', '\x2', 'v', 't', '\x3', '\x2', '\x2', '\x2', 
		'v', 'u', '\x3', '\x2', '\x2', '\x2', 'w', 'y', '\x3', '\x2', '\x2', '\x2', 
		'x', 'T', '\x3', '\x2', '\x2', '\x2', 'x', 'X', '\x3', '\x2', '\x2', '\x2', 
		'x', '\x62', '\x3', '\x2', '\x2', '\x2', 'x', 'k', '\x3', '\x2', '\x2', 
		'\x2', 'x', 'n', '\x3', '\x2', '\x2', '\x2', 'x', 'q', '\x3', '\x2', '\x2', 
		'\x2', 'y', '\xF', '\x3', '\x2', '\x2', '\x2', 'z', '{', '\a', '%', '\x2', 
		'\x2', '{', '\x80', '\a', '\x19', '\x2', '\x2', '|', '\x7F', '\x5', '\b', 
		'\x5', '\x2', '}', '\x7F', '\a', '%', '\x2', '\x2', '~', '|', '\x3', '\x2', 
		'\x2', '\x2', '~', '}', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x82', '\x3', 
		'\x2', '\x2', '\x2', '\x80', '~', '\x3', '\x2', '\x2', '\x2', '\x80', 
		'\x81', '\x3', '\x2', '\x2', '\x2', '\x81', '\x83', '\x3', '\x2', '\x2', 
		'\x2', '\x82', '\x80', '\x3', '\x2', '\x2', '\x2', '\x83', '\x84', '\a', 
		'\x1A', '\x2', '\x2', '\x84', '\x11', '\x3', '\x2', '\x2', '\x2', '\x85', 
		'\x86', '\t', '\a', '\x2', '\x2', '\x86', '\x87', '\t', '\b', '\x2', '\x2', 
		'\x87', '\x88', '\t', '\a', '\x2', '\x2', '\x88', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\x89', '\x8A', '\a', '\xE', '\x2', '\x2', '\x8A', '\x8B', 
		'\x5', '\x16', '\f', '\x2', '\x8B', '\x8C', '\a', '\x18', '\x2', '\x2', 
		'\x8C', '\x8F', '\x5', '$', '\x13', '\x2', '\x8D', '\x8E', '\a', '\xF', 
		'\x2', '\x2', '\x8E', '\x90', '\x5', '$', '\x13', '\x2', '\x8F', '\x8D', 
		'\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', '\x3', '\x2', '\x2', '\x2', 
		'\x90', '\x15', '\x3', '\x2', '\x2', '\x2', '\x91', '\x92', '\a', '%', 
		'\x2', '\x2', '\x92', '\x93', '\a', '\v', '\x2', '\x2', '\x93', '\x9E', 
		'\a', '\'', '\x2', '\x2', '\x94', '\x95', '\a', '%', '\x2', '\x2', '\x95', 
		'\x96', '\a', '\t', '\x2', '\x2', '\x96', '\x97', '\x5', '\x18', '\r', 
		'\x2', '\x97', '\x98', '\t', '\x3', '\x2', '\x2', '\x98', '\x9E', '\x3', 
		'\x2', '\x2', '\x2', '\x99', '\x9A', '\a', '%', '\x2', '\x2', '\x9A', 
		'\x9B', '\x5', '\x18', '\r', '\x2', '\x9B', '\x9C', '\t', '\t', '\x2', 
		'\x2', '\x9C', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x91', '\x3', 
		'\x2', '\x2', '\x2', '\x9D', '\x94', '\x3', '\x2', '\x2', '\x2', '\x9D', 
		'\x99', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\x9F', '\xA0', '\a', '\x1C', '\x2', '\x2', '\xA0', '\xA4', '\a', 
		'\x1C', '\x2', '\x2', '\xA1', '\xA4', '\a', '\x1D', '\x2', '\x2', '\xA2', 
		'\xA4', '\a', '\x1E', '\x2', '\x2', '\xA3', '\x9F', '\x3', '\x2', '\x2', 
		'\x2', '\xA3', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA2', '\x3', 
		'\x2', '\x2', '\x2', '\xA4', '\x19', '\x3', '\x2', '\x2', '\x2', '\xA5', 
		'\xA6', '\a', '\x10', '\x2', '\x2', '\xA6', '\xA7', '\a', '%', '\x2', 
		'\x2', '\xA7', '\xA8', '\a', '\x11', '\x2', '\x2', '\xA8', '\xA9', '\x5', 
		'\x1C', '\xF', '\x2', '\xA9', '\xAA', '\a', '\x18', '\x2', '\x2', '\xAA', 
		'\xAB', '\x5', '$', '\x13', '\x2', '\xAB', '\xB3', '\x3', '\x2', '\x2', 
		'\x2', '\xAC', '\xAD', '\a', '\x10', '\x2', '\x2', '\xAD', '\xAE', '\a', 
		'%', '\x2', '\x2', '\xAE', '\xAF', '\a', '\x11', '\x2', '\x2', '\xAF', 
		'\xB0', '\a', '%', '\x2', '\x2', '\xB0', '\xB1', '\a', '\x18', '\x2', 
		'\x2', '\xB1', '\xB3', '\x5', '$', '\x13', '\x2', '\xB2', '\xA5', '\x3', 
		'\x2', '\x2', '\x2', '\xB2', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xB3', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB5', '\a', '&', '\x2', 
		'\x2', '\xB5', '\xB6', '\a', ' ', '\x2', '\x2', '\xB6', '\xB7', '\a', 
		'&', '\x2', '\x2', '\xB7', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xB8', 
		'\xB9', '\a', '\x12', '\x2', '\x2', '\xB9', '\xBD', '\x5', '\b', '\x5', 
		'\x2', '\xBA', '\xBB', '\a', '\x12', '\x2', '\x2', '\xBB', '\xBD', '\a', 
		'%', '\x2', '\x2', '\xBC', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xBC', 
		'\xBA', '\x3', '\x2', '\x2', '\x2', '\xBD', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\xBE', '\xBF', '\a', '\x4', '\x2', '\x2', '\xBF', '\xC0', '\x5', 
		'\x6', '\x4', '\x2', '\xC0', '\xC4', '\a', '%', '\x2', '\x2', '\xC1', 
		'\xC3', '\x5', '\"', '\x12', '\x2', '\xC2', '\xC1', '\x3', '\x2', '\x2', 
		'\x2', '\xC3', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC2', '\x3', 
		'\x2', '\x2', '\x2', '\xC4', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC5', 
		'\xC7', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC4', '\x3', '\x2', '\x2', 
		'\x2', '\xC7', '\xC8', '\a', '\x18', '\x2', '\x2', '\xC8', '\xC9', '\x5', 
		'$', '\x13', '\x2', '\xC9', '!', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xCB', 
		'\x5', '\x6', '\x4', '\x2', '\xCB', '\xCC', '\a', '\x18', '\x2', '\x2', 
		'\xCC', '\xCD', '\a', '%', '\x2', '\x2', '\xCD', '#', '\x3', '\x2', '\x2', 
		'\x2', '\xCE', '\xD2', '\a', '\x19', '\x2', '\x2', '\xCF', '\xD1', '\x5', 
		'\n', '\x6', '\x2', '\xD0', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xD1', 
		'\xD4', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD0', '\x3', '\x2', '\x2', 
		'\x2', '\xD2', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD5', '\x3', 
		'\x2', '\x2', '\x2', '\xD4', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xD5', 
		'\xD6', '\a', '\x1A', '\x2', '\x2', '\xD6', '%', '\x3', '\x2', '\x2', 
		'\x2', '\xD7', '\xD8', '\t', '\x5', '\x2', '\x2', '\xD8', '\xD9', '\a', 
		'\x18', '\x2', '\x2', '\xD9', '\xDE', '\a', '\x19', '\x2', '\x2', '\xDA', 
		'\xDD', '\x5', '(', '\x15', '\x2', '\xDB', '\xDD', '\x5', '&', '\x14', 
		'\x2', '\xDC', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDB', '\x3', 
		'\x2', '\x2', '\x2', '\xDD', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xDE', 
		'\xDC', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xDF', '\x3', '\x2', '\x2', 
		'\x2', '\xDF', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xDE', '\x3', 
		'\x2', '\x2', '\x2', '\xE1', '\xE2', '\a', '\x1A', '\x2', '\x2', '\xE2', 
		'\'', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE4', '\t', '\x5', '\x2', 
		'\x2', '\xE4', '\xE5', '\a', '\x1C', '\x2', '\x2', '\xE5', '\xE7', '\t', 
		'\t', '\x2', '\x2', '\xE6', '\xE8', '\a', '\x1F', '\x2', '\x2', '\xE7', 
		'\xE6', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xE8', '\x3', '\x2', '\x2', 
		'\x2', '\xE8', ')', '\x3', '\x2', '\x2', '\x2', '\x18', '-', '\x34', '<', 
		'\x43', 'M', 'R', '`', 'i', 'v', 'x', '~', '\x80', '\x8F', '\x9D', '\xA3', 
		'\xB2', '\xBC', '\xC4', '\xD2', '\xDC', '\xDE', '\xE7',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
